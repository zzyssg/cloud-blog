<?xml version="1.0" encoding="UTF-8" ?>
<configuration>
    <property name="APP_NAME" value="comment_log"/>
    <property name="CONSOLE_LOG_PATTERN" value="%d{yyyy-MM-dd HH:mm:ss.SSSS} - [%-5level] - [%class : %method : %line] - %msg %n"/>
    <property name="FILE_LOG_PATTERN" value="%d{yyyy-MM-dd HH:mm:ss.SSS} - [%-5level] - [%class : %method : %line] - %msg %n"/>
    <property name="ROOT_LOG_LEVEL" value="info"/>
    <!--配置项：配置控制台的输出格式-->
    <appender name="consoleLog" class="ch.qos.logback.core.ConsoleAppender">
        <layout class="ch.qos.logback.classic.PatternLayout"> <!--展示配置-->
            <pattern>
                ${CONSOLE_LOG_PATTERN}
            </pattern>
        </layout>
    </appender>

    <!--配置项：配置文件的输出 针对info和log 输出到不同的文件-->
    <appender name="fileInfoLog" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--根据范围过滤-->
        <!-- onMatch,onMismatch取值及含义 -->
        <!-- DENY:日志将立即被抛弃不再经过其他过滤器,最后一个filter的onMismatch使用 -->
        <!-- NEUTRAL:有序列表里的下个过滤器过接着处理日志,非最后一个filter的onMismatch使用 -->
        <!-- ACCEPT:日志会被立即处理，不再经过剩余过滤器,所有filter的onMatch使用
        OFF、FATAL、ERROR、WARN、INFO、DEBUG、TRACE、 ALL
        LevelFilter： 级别过滤器，根据日志级别进行过滤。如果日志级别等于配置级别，过滤器会根据onMath 和 onMismatch接收或拒绝日志。有以下子节点-->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>INFO</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>

        <encoder>
            <pattern>
                ${FILE_LOG_PATTERN}
            </pattern>
        </encoder>
        <!--滚动策略-->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--路径-->
            <fileNamePattern>../logs/${APP_NAME}/${APP_NAME}_info.%d.log</fileNamePattern>
        </rollingPolicy>
    </appender>

    <!--debug日志-->
    <appender name="fileDebugLog" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--根据范围过滤-->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>DEBUG</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>

        <encoder>
            <pattern>
                ${FILE_LOG_PATTERN}
            </pattern>
        </encoder>
        <!--滚动策略-->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--路径-->
            <fileNamePattern>../logs/${APP_NAME}/${APP_NAME}_debug.%d.log</fileNamePattern>
        </rollingPolicy>
    </appender>

    <!--配置项：配置文件的输出 针对不同级别 输出到不同的文件-->
    <appender name="fileErrorLog" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- ThresholdFilter： 临界值过滤器，过滤掉低于指定临界值的日志。 优先级从高到低依次为：OFF、FATAL、ERROR、WARN、INFO、DEBUG、TRACE、 ALL-->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <!--设置error配置项只输出error级别的日志-->
            <level>ERROR</level>
        </filter>

        <encoder>
            <pattern>
                ${FILE_LOG_PATTERN}
            </pattern>
        </encoder>
        <!--滚动策略-->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--路径-->
            <fileNamePattern>../logs/${APP_NAME}/${APP_NAME}_error.%d.log</fileNamePattern>
        </rollingPolicy>
    </appender>
    <!--myibatis log configure
    <logger name="org.apache.ibatis" level="TRACE" /> -->
    <logger name="com.zzy" level="DEBUG" />
    <logger name="java.sql.Connection" level="DEBUG" />
    <logger name="java.sql.Statement" level="DEBUG" />
    <logger name="java.sql.PreparedStatement" level="DEBUG" />

    <!--应用到那里 root：这个项目都适用-->
    <root level="${ROOT_LOG_LEVEL}">
        <appender-ref ref="consoleLog"/>
        <appender-ref ref="fileInfoLog"/>
        <appender-ref ref="fileErrorLog"/>
        <appender-ref ref="fileDebugLog"/>
    </root>
</configuration>
